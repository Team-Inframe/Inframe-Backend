services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    networks:
      - inf
    env_file:
      - .env
    command: >
      sh -c "python manage.py collectstatic --noinput &&
            python manage.py migrate --noinput &&
            gunicorn --workers=2 --bind 0.0.0.0:8000 config.wsgi:application"
    deploy:
      replicas: 1
      labels:
        - traefik.enable=true
          - traefik.http.services.backend.loadbalancer.server.port=8000
          - traefik.http.routers.backend.entrypoints=websecure
          - traefik.http.routers.backend.rule=Host(`${DOMAIN}`) && PathPrefix(`/api/v1`)
          - traefik.http.routers.backend.middlewares=backend-stripprefix
          - traefik.http.middlewares.backend-stripprefix.stripprefix.prefixes=/api/v1
          - traefik.http.routers.backend.tls.certresolver=letsencrypt


  traefik:
    image: traefik:v2.9
    command:
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --providers.docker=true
      - --api=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=http
      - --certificatesresolvers.letsencrypt.acme.email=${EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
    labels:
      - traefik.http.routers.to-https.rule=HostRegexp(`{host:.+}`)
      - traefik.http.routers.to-https.entrypoints=http
      - traefik.http.routers.to-https.middlewares=to-https

      - traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)
      - traefik.http.routers.traefik.entrypoints=https
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.tls.certresolver=${CERT_RESOLVER}

      - traefik.http.middlewares.to-https.redirectscheme.scheme=https
    ports:
      - 80:80
      - 443:443
    volumes:
      - letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro

networks:
  inf

volumes:
  letsencrypt:
    driver: local